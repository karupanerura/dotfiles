[include]
    path = .gitconfig.local
[core]
    editor = emacsclient -nw
    pager  = less
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
[color]
    ui = always
    branch = auto
    diff = auto
    status = auto
    interactive = auto
    grep = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[branch]
    autosetupmerge = false
    autosetuprebase = always
[rebase]
    stat = true
[merge]
    stat = true
    ff   = false
[merge "mergepbx"]
    name = XCode project files merger
    driver = ~/local/bin/mergepbx %O %A %B
[alias]
    list-alias          = "!git config --list | perl -F\\\\. -ane 'printf \"%-20s%s\", split \"=\", join(\".\", @F[1..@F-1]), 2 if $F[0] eq \"alias\"'"
    st                  = status
    ci                  = commit
    br                  = branch
    co                  = checkout
    cor                 = checkout-recursive
    checkout-recursive  = "git checkout \"$@\" && git submodule update --init --recursive"
    clean-untracked     = "!git ls-files --others --exclude-standard | xargs rm"
    co-hist-peco        = "!git checkout `git history -n50 | sort | uniq -c | sort -nr | awk '{print $2}' | peco`"
    co-peco             = "!f () { cd `git rev-parse --git-dir`; find refs/heads -type f | cut -d/ -f 3- | peco; }; git checkout `f`"
    co-peco-by-remote   = "!f () { cd `git rev-parse --git-dir`; git branch -r --list  | awk '$1 != \"origin/HEAD\" {print $1}' | cut -d/ -f2- | peco; }; branch=`f`; echo git checkout -b $branch -t origin/$branch"
    df                  = diff
    dfc                 = diff --cached
    dw                  = diff -w --word-diff
    dwc                 = diff -w --word-diff --cached
    lg                  = log -p
    url                 = config --get remote.origin.url
    tree                = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'
    wt                  = whatchanged --stat
    edit                = "!f() { git status --porcelain | awk '{print $2}' | perl -pe 's!^!`git rev-parse --show-cdup`=~s/\n//r!eg' | peco ; }; emacs `f`"
    edit-unmerged       = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; emacs `f`"
    add-unmerged        = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
    ck                  = "!git --no-pager diff --diff-filter=ACMRX --name-only --no-color HEAD | egrep '\\.(t|p([lm]|sgi))$' | xargs -n 1 -P2 perl -wc"
    fetch-pulls         = fetch origin +refs/pull/*:refs/remotes/pull/*
    fetch-all           = "!find ~/project -maxdepth 3 -name .git -type d | xargs -P3 -n1 -I% git --git-dir=% fetch"
    branch-name         = symbolic-ref --short HEAD
    cv                  = "!f() { git cherry \"$@\" | perl -ane 'print $F[0], \" \", `git --no-pager show --date=short --no-notes --pretty=\"%h %Cgreen%cd %Cblue%cn%x09%Creset%s\" -s $F[1]`' ; }; f"
    new-branch          = "!f() { BRANCH_NAME=$1; git fetch && git co -b $BRANCH_NAME origin/master && git push -u origin $BRANCH_NAME; }; f \"$@\""
    back                = checkout -
    history             = "!f() { git --no-pager reflog | awk '$3 == \"checkout:\" && /moving from/ {print $8}' | uniq | head \"$@\"; }; f \"$@\""
    log-ticket-id       = "!f() { git log --format=%s \"$@\" | perl -ne 'print if /refs #([0-9]+)/ && $tid != $1 and $tid = $1' | head -n10 ; }; f \"$@\""
    rollback-typechange = "!git diff --name-only --diff-filter=T \"$@\" | xargs git co --"
    force-unlock        = "!git rev-parse --is-inside-work-tree > /dev/null && rm -i `git rev-parse --git-dir`/index.lock"
    log-quarter         = "!f() { git log --no-merges --format='%h %ai (%aN) %s' --author=$USER --author=karupanerura --author=\"`git config --get --includes user.name`\"  --after=`ruby -rdate -e 'now = Time.now; month = [3,6,9,12][((now.month - 1) / 3)]; dt = Date.new(now.year, month, 1) << 3; puts dt'` --before=`ruby -rdate -e 'now = Time.now; month = [3,6,9,12][((now.month - 1) / 3)]; dt = (Date.new(now.year, month, 1) >> 1) - 1; puts dt'` \"$@\" ; }; f \"$@\""
    wild                = "!echo get wild"
[push]
    default = current
[pull]
    rebase = true
[rerere]
    enabled = true
[grep]
    lineNumber = true
[help]
    autocorrect = 1
[github]
    user = karupanerura
[pager]
    log  = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less
[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
